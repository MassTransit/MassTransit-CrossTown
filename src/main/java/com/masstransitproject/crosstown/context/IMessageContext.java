package com.masstransitproject.crosstown.context;

import java.net.URI;
import java.sql.Timestamp;
import java.util.Map;

// Copyright 2007-2011 Chris Patterson, Dru Sellers, Travis Smith, et. al.
//  
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use 
// this file except in compliance with the License. You may obtain a copy of the 
// License at 
// 
//     http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software distributed 
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
// CONDITIONS OF ANY KIND, either express or implied. See the License for the 
// specific language governing permissions and limitations under the License.

/// <summary>
/// The base message context, including all the message headers
/// </summary>
public interface IMessageContext {
	// / <summary>
	// / The transport id of the message
	// / </summary>
	String getMessageId();

	// / <summary>
	// / The type of the message in FullName, Assembly format
	// / </summary>
	String getMessageType();

	// / <summary>
	// / The content type of the message from the transport
	// / </summary>
	String getContentType();

	// / <summary>
	// / The request identifier this message is either a request or a response
	// / </summary>
	String getRequestId();

	// / <summary>
	// / The conversation identifier is a higher-level identifier for
	// trace/correlation of conversations
	// / </summary>
	String getConversationId();

	// / <summary>
	// / If the message is CorrelatedBy, this header contains the String version
	// of the correlation identifier
	// / </summary>
	String getCorrelationId();

	// / <summary>
	// / The address from which this message originated
	// / </summary>
	URI getSourceAddress();

	// / <summary>
	// / The address from which this message was most recently read
	// / </summary>
	URI getInputAddress();

	// / <summary>
	// / The address to which the message was originally sent
	// / </summary>
	URI getDestinationAddress();

	// / <summary>
	// / The address where responses to this message should be sent
	// / </summary>
	URI getResponseAddress();

	// / <summary>
	// / The address where faults generated by consumers of this message should
	// be sent
	// / </summary>
	URI getFaultAddress();

	// / <summary>
	// / Identifies a specific network to which this message belongs and is used
	// to filter
	// / out messages that might be from un-trusted networks
	// / </summary>
	String getNetwork();

	// / <summary>
	// / The expiration time of the message, if set, otherwise null
	// / </summary>
	Timestamp getExpirationTime();

	// / <summary>
	// / The number of times this message has been delivered to the consumer
	// / </summary>
	int getRetryCount();

	// / <summary>
	// / Key/value headers that are application-specific
	// / </summary>
	Map<String, String> getHeaders();

}